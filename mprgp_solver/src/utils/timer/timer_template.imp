/** -*- mode: c++ -*-
 * @file timer_template.imp
 * @author LamKamhang (Cool_Lam@outlook.com)
 * @brief A Documented file.
 * @version 1.1
 * @date Fri Dec 6 16:34:52 CST 2019
 *
 * Detailed description
 *
 *
 * @copyright Copyright (c) 2019
 */
#ifndef CHAOS_TIMER_TEMPLATE_H
#define CHAOS_TIMER_TEMPLATE_H
#include "timer_utils.h"

namespace chaos
{
  namespace utils
  {
    template<class Rep>
    inline void stopwatch_t::stop()
    {
      warn_msg_cond(isstop, "the stopwatch has stopped. This stop will not work.");
      if (!isstop)
        {
          switch(scale)
            {
            case TS_HOURS       : stop<Rep, std::ratio<3600> >(); break;
            case TS_MINUTES     : stop<Rep, std::ratio< 60 > >(); break;
            case TS_SECONDS     : stop<Rep, std::ratio< 1  > >(); break;
            case TS_MILLISECONDS: stop<Rep, std::milli       >(); break;
            case TS_MICROSECONDS: stop<Rep, std::micro       >(); break;
            case TS_NANOSECONDS : stop<Rep, std::nano        >(); break;
            default: error_msg("scale type: %d cannot use this function", scale) ; break;
            }
        }
    }

    template<class Rep, class Period>
    inline void stopwatch_t::stop()
    {
      warn_msg_cond(isstop, "the stopwatch has stopped. This stop will not work.");
      if (!isstop)
        {
          tp_end = std::chrono::steady_clock::now();
          isstop = true;
          Rep cost = std::chrono::duration_cast<std::chrono::duration<Rep, Period> >
            (tp_end - tp_begin).count();
          warn_msg_cond(cost <= eps<Rep>(),
                        "stopwatch scalar<%d>|unit<%s> is not good. #cost_iter:%lf",
                        scale, timer_scale_units_str(scale), 1.0*cost);
          if (cost < min_cost) min_cost = cost;
          if (cost > max_cost) max_cost = cost;
          double weight = 1.0 / (cnt+1);
          avg_cost = cnt * weight * avg_cost + weight * cost;
          cnt++;
        }
    }

    template<class Rep>
    inline std::string stopwatch_t::stop (const std::string &event)
    { stop<Rep>(); return get_avg(event); }

    template<class Rep, class Period>
    inline std::string stopwatch_t::stop(const std::string &event, const std::string &unit)
    { stop<Rep, Period>(); return get_avg(event, unit); }

#ifdef USE_STOPWATCH_HELPER_FLAG
    template<class Rep>
    void STW_STOP (const std::string &token)
    {
      STW_STOP<Rep> (std::hash<std::string>{}(token));
    }

    template<class Rep>
    void STW_STOP (const stopwatch_id_t &id)
    {
      const auto & stw = stopwatch_manager_t::get_instance().get(id);
      stw->stop<Rep> ();
    }


    template<class Rep, class Period>
    void STW_STOP (const std::string &token)
    {
      STW_STOP<Rep, Period> (std::hash<std::string>{}(token));
    }

    template<class Rep, class Period>
    void STW_STOP (const stopwatch_id_t &id)
    {
      const auto & stw = stopwatch_manager_t::get_instance().get(id);
      stw->stop<Rep, Period> ();
    }

    template<class Rep>
    void STW_END (const std::string &token, const std::string &event)
    {
      STW_END<Rep> (std::hash<std::string>{}(token), event);
    }

    template<class Rep>
    void STW_END (const stopwatch_id_t &id, const std::string &event)
    {
      const auto & stw = stopwatch_manager_t::get_instance().get(id);
      if (stw->is_stop())
        {
          info_msg ("%s", stw->get_avg(event).c_str());
        }
      else
        {
          info_msg ("%s", stw->stop<Rep>(event).c_str());
        }
      stopwatch_manager_t::get_instance().remove(id);
    }

    template<class Rep, class Period>
    void STW_END (const std::string &token, const std::string &event, const std::string &unit)
    {
      STW_END<Rep, Period> (std::hash<std::string>{}(token), event, unit);
    }

    template<class Rep, class Period>
    void STW_END (const stopwatch_id_t &id, const std::string &event, const std::string &unit)
    {
      const auto & stw = stopwatch_manager_t::get_instance().get(id);
      if (stw->is_stop())
        {
          info_msg ("%s", stw->get_avg(event).c_str());
        }
      else
        {
          info_msg ("%s", stw->stop<Rep, Period>(event, unit).c_str());
        }
      stopwatch_manager_t::get_instance().remove(id);
    }
#else
    template<class Rep>
    void STW_STOP (const std::string __attribute__((__unused__)) &token){}
    template<class Rep>
    void STW_STOP (const stopwatch_id_t __attribute__((__unused__)) &id){}


    template<class Rep, class Period>
    void STW_STOP (const std::string __attribute__((__unused__)) &token){}
    template<class Rep, class Period>
    void STW_STOP (const stopwatch_id_t __attribute__((__unused__)) &id){}

    template<class Rep>
    void STW_END (const std::string __attribute__((__unused__)) &token,
                  const std::string __attribute__((__unused__)) &event){}
    template<class Rep>
    void STW_END (const stopwatch_id_t __attribute__((__unused__)) &id,
                  const std::string __attribute__((__unused__)) &event){}

    template<class Rep, class Period>
    void STW_END (const std::string __attribute__((__unused__)) &token,
                  const std::string __attribute__((__unused__)) &event,
                  const std::string __attribute__((__unused__)) &unit){}
    template<class Rep, class Period>
    void STW_END (const stopwatch_id_t __attribute__((__unused__)) &id,
                  const std::string __attribute__((__unused__)) &event,
                  const std::string __attribute__((__unused__)) &unit){}
#endif /*  USE_STOPWATCH_HELPER_FLAG */
  } // utils
} // chaos
#endif /* CHAOS_TIMER_TEMPLATE_H */

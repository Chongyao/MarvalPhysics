load("./cj_function.mac")$
load("./hj_fortran2.mac")$

optimprefix: tt$

f: openw("quad_to_lin.f90")$

block(
  [F, mu, lam, F2],
  F:   genmatrix(F, 2, 4),
  mu:  genmatrix(mu, 1, 1),
  lam: genmatrix(lam, 1, 1),
  F2:  genmatrix(F2, 2, 2),

  quad_lin_F_val_at_qr(F, mu, lam) := block(
    [E],
    E: (transpose(F)+F)/2-ident(2),
    mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2
  ),
  quad_lin_F_gra_at_qr(F, mu, lam) := transpose(GRAD(quad_lin_F_val_at_qr(F, mu, lam), F)), /* Nx1 matrix */
  quad_lin_F_hes_at_qr(F, mu, lam) := GRAD(quad_lin_F_gra_at_qr(F, mu, lam), F),            /* NxN matrix */
  /*  with_stdout(f, val_jac_hes_to_f90(quad_lin_F_val_at_qr, [F2, mu, lam])), */
  
  quad_lin_q2l_psi(F, mu, lam) := block(
    [F4, F9, dF, E, g, H],
    F4: addcol(col(F, 1), col(F, 2)),
    F9: addcol(col(F, 3), col(F, 4)),
    dF: transpose(matrix(FLATTEN(F9-F4))), /* Nx1 matrix */

    E: quad_lin_F_val_at_qr(F4, mu, lam),
    g: quad_lin_F_gra_at_qr(F4, mu, lam),
    H: quad_lin_F_hes_at_qr(F4, mu, lam),

    ratsimp(E + matrix([ DOT(g, dF) ]) + matrix([ DOT(dF, H.dF) ])/2)
  ),
  with_stdout(f, val_jac_to_f90(quad_lin_q2l_psi, [F, mu, lam])),

  return()
)$

block(
  [F, R, mu, lam],
  F:   genmatrix(F,   2, 2),
  R:   genmatrix(R,   2, 2),
  mu:  genmatrix(mu,  1, 1),
  lam: genmatrix(lam, 1, 1),

  quad_coro_F_val_at_qr(F, R, mu, lam) := block(
    [E],
    E: (transpose(F).R+transpose(R).F)/2-ident(2),
    mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2
  ),
  with_stdout(f, val_jac_hes_to_f90(quad_coro_F_val_at_qr, [F, R, mu, lam])),

  return()
)$

block(
  [F, mu, lam, F2],
  F:   genmatrix(F, 2, 4),
  mu:  genmatrix(mu, 1, 1),
  lam: genmatrix(lam, 1, 1),
  F2:  genmatrix(F2, 2, 2),

  quad_neo_F_val_at_qr(F, mu, lam) := block(
    [I1, J],
    I1: mat_trace(transpose(F).F),
    J: determinant(F),
    I1bar: I1/J,
    ( mu*(I1bar-2)+lam*(J-1)^2 )/2
  ),
  quad_neo_F_gra_at_qr(F, mu, lam) := transpose(GRAD(quad_neo_F_val_at_qr(F, mu, lam), F)), /* Nx1 matrix */
  quad_neo_F_hes_at_qr(F, mu, lam) := GRAD(quad_neo_F_gra_at_qr(F, mu, lam), F),            /* NxN matrix */
  with_stdout(f, val_jac_hes_to_f90(quad_neo_F_val_at_qr, [F2, mu, lam])),
  
  /*
     F is 2x4 matrix.
     The first two cols of F is the deformation
     gradient evaluted by four points of bilinear
     quad element, and the last two cols is the
     evaluated by 9 points of biquadratic element
  */
  quad_neo_q2l_psi(F, mu, lam) := block(
    [F4, F9, dF, E, g, H],
    F4: addcol(col(F, 1), col(F, 2)),
    F9: addcol(col(F, 3), col(F, 4)),
    dF: transpose(matrix(FLATTEN(F9-F4))), /* Nx1 matrix */

    E: quad_neo_F_val_at_qr(F4, mu, lam),
    g: quad_neo_F_gra_at_qr(F4, mu, lam),
    H: quad_neo_F_hes_at_qr(F4, mu, lam),

    ratsimp(E + matrix([ DOT(g, dF) ]) + matrix([ DOT(dF, H.dF) ])/2)
  ),
  with_stdout(f, val_jac_hes_to_f90(quad_neo_q2l_psi, [F, mu, lam])),

  return()
)$

block(
  [F, mu, lam, F2],
  F:   genmatrix(F, 2, 4),
  mu:  genmatrix(mu, 1, 1),
  lam: genmatrix(lam, 1, 1),
  F2:  genmatrix(F2, 2, 2),
  
  quad_stvk_F_val_at_qr(F, mu, lam) := block(
    [E],
    E: (transpose(F).F-ident(2))/2,
    mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2
  ),
  quad_stvk_F_gra_at_qr(F, mu, lam) := transpose(GRAD(quad_stvk_F_val_at_qr(F, mu, lam), F)), /* Nx1 matrix */
  quad_stvk_F_hes_at_qr(F, mu, lam) := GRAD(quad_stvk_F_gra_at_qr(F, mu, lam), F),            /* NxN matrix */
  with_stdout(f, val_jac_hes_to_f90(quad_stvk_F_val_at_qr, [F2, mu, lam])),

  quad_stvk_q2l_psi(F, mu, lam) := block(
    [F4, F9, dF, E, g, H],
    F4: addcol(col(F, 1), col(F, 2)),
    F9: addcol(col(F, 3), col(F, 4)),
    dF: transpose(matrix(FLATTEN(F9-F4))), /* Nx1 matrix */

    E: quad_stvk_F_val_at_qr(F4, mu, lam),
    g: quad_stvk_F_gra_at_qr(F4, mu, lam),
    H: quad_stvk_F_hes_at_qr(F4, mu, lam),

    ratsimp(E + matrix([ DOT(g, dF) ]) + matrix([ DOT(dF, H.dF) ])/2)
  ),
  with_stdout(f, val_jac_hes_to_f90(quad_stvk_q2l_psi, [F, mu, lam])),

  return()
)$

close(f)$
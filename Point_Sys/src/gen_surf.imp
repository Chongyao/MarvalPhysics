#include "gen_surf.h"
#include <Eigen/Core>
#include <Eigen/LU>
#include <cmath>
#include <iostream>

using namespace Eigen;
using namespace std;
namespace marvel{

/********************************CLASS deform_surf******************************/
template<typename T>
deform_surf<T>::deform_surf(const MatrixXi &surf, const Matrix<T,-1,-1> &nods, const Matrix<T, -1, -1> &sam_points):surf_(surf), nods_(nods), sam_points_(sam_points){}
/********************************CLASS deform_surf******************************/

/********************************CLASS deform_surf_MLS******************************/
template<typename T>
deform_surf_MLS<T>::deform_surf_MLS(const MatrixXi &surf, const Matrix<T,-1,-1> &nods, const Matrix<T, -1, -1> &sam_points, const std::vector<std::vector<size_t>> &friends, const T &kernel_cof):deform_surf<T>(surf, nods, sam_points), friends_(friends), kernel_cof_(kernel_cof){
  
}

template<typename T>
T deform_surf_MLS<T>::kernel(const size_t &vertex_id, const size_t &point_id, const T &h) const {
  T r = (this->sam_points_.col(point_id) - this->nods_.col(vertex_id)).norm();
  return exp(-r*r/h/h);
}

template<typename T>
T deform_surf_MLS<T>::kernel(const T &r, const T &h) const {
  return exp(-r*r/h/h);
}

template<typename T>
Matrix<T, -1, -1> deform_surf_MLS<T>::update_surf(const Matrix<T, -1 ,-1>& moved_points_dis, const Matrix<T, -1, -1> &def_gra_all) const {
  Matrix<T, -1, -1> nods_dis(3, this->nods_.cols());
  for(size_t i = 0; i < this->nods_.cols(); ++i){
    Matrix<T, 3, 1> ver_dis;
    T scal_fac = 0;
    ver_dis.setZero(3, 1);
    
    for(size_t j = 0; j < friends_[i].size(); ++j){
      size_t fri_id = friends_[i][j];
      
      Matrix<T, 3, 1> rij = this->sam_points_.col(fri_id) - this->nods_.col(i);
      T gas_weig = kernel(rij.norm(), kernel_cof_);
      
      scal_fac += gas_weig;
      Map<const Matrix<T, -1, -1>> def_gra(def_gra_all.col(fri_id).data(), 3, 3);
      auto dis_gra = def_gra - Matrix<T, -1, -1>::Identity(3, 3);
      ver_dis += gas_weig*(moved_points_dis.col(fri_id) + dis_gra.transpose()*rij);
    }//every friend
    assert(scal_fac > 0);
    nods_dis.col(i) = ver_dis/scal_fac;
  }//every nod

  return nods_dis;

}


/********************************CLASS deform_surf_MLS******************************/


/********************************CLASS deform_surf_LI******************************/
// template<typename T>  
// deform_surf_LI<T>::deform_surf_LI(const MatrixXi &surf, const Matrix<T, -1, -1> &nods, const Matrix<T, -1, -1> &sam_points, const MatrixXi &four_NN):deform_surf<T>(surf, nods, sam_points), four_NN_(four_NN){
//   basis_weig_ = Matrix<T, -1, -1>(3, nods.cols());
//   for(size_t i = 0; i < nods.cols(); ++i){
//     Matrix3d basis;
//     for(size_t j = 0; j < 3; ++j){
//       cout << "four_NN_: " << endl;
//       cout << four_NN_.col(i) << endl;
//       basis.col(j) = this->sam_points_.col(four_NN_(j, i)) - this->sam_points_.col(four_NN_(3, i));
//       cout << "basis.col " << j << " = [" << this->sam_points_.col(four_NN_(j, i)).transpose() << "] - [" << this->sam_points_.col(four_NN_(3, i)).transpose() << "]" << endl;
//     }
//     // Calculate weight of each basis of a single node
//     PartialPivLU<Matrix<T, -1, -1>> lu_solver(basis);
//     // basis.col(i) * basis_weig_ = nods.col(i);
//     basis_weig_.col(i) = basis.lu().solve(nods.col(i));
//     cout << basis_weig_.col(i) << endl;
//   }
// }//function:deform_surf_LI()

// // deform
// template<typename T>
// Matrix<T, -1, -1> deform_surf_LI<T>::update_surf(const Matrix<T, -1, -1> &moved_points) const{
//   Matrix<T, -1, -1> moved_nods(3, this->nods_.cols());
//   for(size_t i = 0; i < this->nods_.cols(); ++i){
//     Matrix3d basis;
//     for(size_t j = 0; j < 3; ++j){
//       basis.col(j) = moved_points.col(this->four_NN_(j, i)) - moved_points.col(this->four_NN_(3, i));
//     }
//     moved_nods.col(i) = basis * this->basis_weig_.col(i);
//   }
//   return moved_nods;
//}


/********************************CLASS deform_surf_LI******************************/

}//namespace: marvel

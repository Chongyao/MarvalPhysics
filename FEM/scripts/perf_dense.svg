<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
	}

	// search
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)", "");
			if (term != null) {
				search(term)
			}
		} else {
			reset_search();
			searching = 0;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		var re = new RegExp(term);
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="358.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="341" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="matched" x="1090.00" y="341" > </text>
<g id="frames">
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (9 samples, 0.02%)</title><rect x="1177.0" y="229" width="0.2" height="15.0" fill="rgb(245,64,51)" rx="2" ry="2" />
<text  x="1179.99" y="239.5" ></text>
</g>
<g >
<title>Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 4, 0, 3, 4&gt;, Eigen::CwiseNullaryOp&lt;marvel::indexing_functor&lt;Eigen::Matrix&lt;double, 3, -1, 0, 3, -1&gt;, Eigen::Matrix&lt;int, 3, 1, 0, 3, 1&gt;, Eigen::Block&lt;Eigen::Matrix&lt;int, 4, -1, 0, 4, -1&gt; const, 4, 1, true&gt; &gt;, Eigen::Matrix&lt;double, 3, 4, 0, 3, 4&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (8 samples, 0.01%)</title><rect x="1163.8" y="245" width="0.2" height="15.0" fill="rgb(215,204,46)" rx="2" ry="2" />
<text  x="1166.82" y="255.5" ></text>
</g>
<g >
<title>prepare_exit_to_usermode (9 samples, 0.02%)</title><rect x="1162.8" y="229" width="0.2" height="15.0" fill="rgb(225,60,19)" rx="2" ry="2" />
<text  x="1165.78" y="239.5" ></text>
</g>
<g >
<title>nv_check_pci_config_space (7 samples, 0.01%)</title><rect x="1161.8" y="117" width="0.2" height="15.0" fill="rgb(246,138,10)" rx="2" ry="2" />
<text  x="1164.84" y="127.5" ></text>
</g>
<g >
<title>tick_sched_do_timer (11 samples, 0.02%)</title><rect x="1160.8" y="165" width="0.2" height="15.0" fill="rgb(220,31,31)" rx="2" ry="2" />
<text  x="1163.76" y="175.5" ></text>
</g>
<g >
<title>scsi_finish_command (19 samples, 0.03%)</title><rect x="1162.3" y="149" width="0.4" height="15.0" fill="rgb(251,32,23)" rx="2" ry="2" />
<text  x="1165.32" y="159.5" ></text>
</g>
<g >
<title>read (5 samples, 0.01%)</title><rect x="1189.3" y="277" width="0.1" height="15.0" fill="rgb(245,120,6)" rx="2" ry="2" />
<text  x="1192.34" y="287.5" ></text>
</g>
<g >
<title>run_timer_softirq (9 samples, 0.02%)</title><rect x="1161.8" y="181" width="0.2" height="15.0" fill="rgb(233,195,35)" rx="2" ry="2" />
<text  x="1164.80" y="191.5" ></text>
</g>
<g >
<title>handle_irq (16 samples, 0.03%)</title><rect x="1162.0" y="213" width="0.3" height="15.0" fill="rgb(239,184,34)" rx="2" ry="2" />
<text  x="1165.00" y="223.5" ></text>
</g>
<g >
<title>sys_read (5 samples, 0.01%)</title><rect x="1189.3" y="229" width="0.1" height="15.0" fill="rgb(250,33,53)" rx="2" ry="2" />
<text  x="1192.34" y="239.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;long&gt; (11 samples, 0.02%)</title><rect x="1177.2" y="229" width="0.3" height="15.0" fill="rgb(224,1,23)" rx="2" ry="2" />
<text  x="1180.23" y="239.5" ></text>
</g>
<g >
<title>x86_pmu_enable (8 samples, 0.01%)</title><rect x="1162.8" y="133" width="0.2" height="15.0" fill="rgb(214,42,37)" rx="2" ry="2" />
<text  x="1165.80" y="143.5" ></text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (8 samples, 0.01%)</title><rect x="1162.8" y="117" width="0.2" height="15.0" fill="rgb(227,12,21)" rx="2" ry="2" />
<text  x="1165.80" y="127.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (34 samples, 0.06%)</title><rect x="1179.0" y="213" width="0.7" height="15.0" fill="rgb(252,59,45)" rx="2" ry="2" />
<text  x="1182.03" y="223.5" ></text>
</g>
<g >
<title>do_syscall_64 (5 samples, 0.01%)</title><rect x="1189.3" y="245" width="0.1" height="15.0" fill="rgb(207,27,18)" rx="2" ry="2" />
<text  x="1192.34" y="255.5" ></text>
</g>
<g >
<title>marvel::basis_func&lt;double, 3ul, 1ul, 4ul&gt;::get_def_gra (20 samples, 0.03%)</title><rect x="1175.7" y="229" width="0.4" height="15.0" fill="rgb(254,172,51)" rx="2" ry="2" />
<text  x="1178.65" y="239.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (19 samples, 0.03%)</title><rect x="1161.6" y="197" width="0.4" height="15.0" fill="rgb(254,122,32)" rx="2" ry="2" />
<text  x="1164.60" y="207.5" ></text>
</g>
<g >
<title>do_syscall_64 (18 samples, 0.03%)</title><rect x="1181.2" y="245" width="0.4" height="15.0" fill="rgb(214,220,20)" rx="2" ry="2" />
<text  x="1184.19" y="255.5" ></text>
</g>
<g >
<title>run_rebalance_domains (6 samples, 0.01%)</title><rect x="1161.7" y="181" width="0.1" height="15.0" fill="rgb(251,73,24)" rx="2" ry="2" />
<text  x="1164.68" y="191.5" ></text>
</g>
<g >
<title>scsi_kick_queue (7 samples, 0.01%)</title><rect x="1162.6" y="85" width="0.1" height="15.0" fill="rgb(228,201,49)" rx="2" ry="2" />
<text  x="1165.56" y="95.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (42 samples, 0.07%)</title><rect x="1160.6" y="197" width="0.9" height="15.0" fill="rgb(209,68,22)" rx="2" ry="2" />
<text  x="1163.64" y="207.5" ></text>
</g>
<g >
<title>std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt; (12 samples, 0.02%)</title><rect x="1177.8" y="229" width="0.3" height="15.0" fill="rgb(231,216,21)" rx="2" ry="2" />
<text  x="1180.81" y="239.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (46 samples, 0.08%)</title><rect x="1160.6" y="213" width="1.0" height="15.0" fill="rgb(218,126,6)" rx="2" ry="2" />
<text  x="1163.64" y="223.5" ></text>
</g>
<g >
<title>handle_irq_event (13 samples, 0.02%)</title><rect x="1162.0" y="181" width="0.3" height="15.0" fill="rgb(247,42,18)" rx="2" ry="2" />
<text  x="1165.00" y="191.5" ></text>
</g>
<g >
<title>schedule (8 samples, 0.01%)</title><rect x="1162.8" y="197" width="0.2" height="15.0" fill="rgb(217,51,36)" rx="2" ry="2" />
<text  x="1165.80" y="207.5" ></text>
</g>
<g >
<title>ext4_da_write_begin (8 samples, 0.01%)</title><rect x="1181.2" y="101" width="0.2" height="15.0" fill="rgb(238,164,37)" rx="2" ry="2" />
<text  x="1184.23" y="111.5" ></text>
</g>
<g >
<title>scsi_io_completion (19 samples, 0.03%)</title><rect x="1162.3" y="133" width="0.4" height="15.0" fill="rgb(252,34,42)" rx="2" ry="2" />
<text  x="1165.32" y="143.5" ></text>
</g>
<g >
<title>ext4_block_write_begin (5 samples, 0.01%)</title><rect x="1181.2" y="85" width="0.1" height="15.0" fill="rgb(253,61,51)" rx="2" ry="2" />
<text  x="1184.23" y="95.5" ></text>
</g>
<g >
<title>vfprintf (10 samples, 0.02%)</title><rect x="1167.4" y="245" width="0.2" height="15.0" fill="rgb(205,23,14)" rx="2" ry="2" />
<text  x="1170.43" y="255.5" ></text>
</g>
<g >
<title>std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ofstream (39 samples, 0.07%)</title><rect x="1177.0" y="261" width="0.8" height="15.0" fill="rgb(238,57,48)" rx="2" ry="2" />
<text  x="1179.99" y="271.5" ></text>
</g>
<g >
<title>__GI___printf_fp_l (81 samples, 0.14%)</title><rect x="11.0" y="229" width="1.6" height="15.0" fill="rgb(214,17,16)" rx="2" ry="2" />
<text  x="14.00" y="239.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (6 samples, 0.01%)</title><rect x="1179.7" y="213" width="0.1" height="15.0" fill="rgb(222,144,53)" rx="2" ry="2" />
<text  x="1182.71" y="223.5" ></text>
</g>
<g >
<title>update_wall_time (8 samples, 0.01%)</title><rect x="1160.8" y="133" width="0.2" height="15.0" fill="rgb(223,170,11)" rx="2" ry="2" />
<text  x="1163.82" y="143.5" ></text>
</g>
<g >
<title>__GI___printf_fp_l (8 samples, 0.01%)</title><rect x="1167.5" y="229" width="0.1" height="15.0" fill="rgb(231,38,52)" rx="2" ry="2" />
<text  x="1170.47" y="239.5" ></text>
</g>
<g >
<title>do_iter_write (17 samples, 0.03%)</title><rect x="1181.2" y="181" width="0.4" height="15.0" fill="rgb(211,206,8)" rx="2" ry="2" />
<text  x="1184.21" y="191.5" ></text>
</g>
<g >
<title>ahci_single_level_irq_intr (9 samples, 0.02%)</title><rect x="1162.0" y="133" width="0.2" height="15.0" fill="rgb(249,214,18)" rx="2" ry="2" />
<text  x="1165.04" y="143.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_filebuf (22 samples, 0.04%)</title><rect x="1176.6" y="261" width="0.4" height="15.0" fill="rgb(247,211,20)" rx="2" ry="2" />
<text  x="1179.55" y="271.5" ></text>
</g>
<g >
<title>tty_read (5 samples, 0.01%)</title><rect x="1189.3" y="181" width="0.1" height="15.0" fill="rgb(209,75,8)" rx="2" ry="2" />
<text  x="1192.34" y="191.5" ></text>
</g>
<g >
<title>nvidia_rc_timer_callback (7 samples, 0.01%)</title><rect x="1161.8" y="133" width="0.2" height="15.0" fill="rgb(205,46,6)" rx="2" ry="2" />
<text  x="1164.84" y="143.5" ></text>
</g>
<g >
<title>std::num_put&lt;char, std::ostreambuf_iterator&lt;char, std::char_traits&lt;char&gt; &gt; &gt;::_M_insert_int&lt;long&gt; (38 samples, 0.06%)</title><rect x="1179.9" y="213" width="0.8" height="15.0" fill="rgb(244,153,10)" rx="2" ry="2" />
<text  x="1182.91" y="223.5" ></text>
</g>
<g >
<title>[unknown] (184 samples, 0.31%)</title><rect x="1172.7" y="245" width="3.7" height="15.0" fill="rgb(228,34,27)" rx="2" ry="2" />
<text  x="1175.69" y="255.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (10 samples, 0.02%)</title><rect x="1167.4" y="261" width="0.2" height="15.0" fill="rgb(233,119,37)" rx="2" ry="2" />
<text  x="1170.43" y="271.5" ></text>
</g>
<g >
<title>Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 4, 0, 3, 4&gt;, Eigen::CwiseNullaryOp&lt;marvel::indexing_functor&lt;Eigen::Map&lt;Eigen::Matrix&lt;double, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Matrix&lt;int, 3, 1, 0, 3, 1&gt;, Eigen::Block&lt;Eigen::Matrix&lt;int, 4, -1, 0, 4, -1&gt; const, 4, 1, true&gt; &gt;, Eigen::Matrix&lt;double, 3, 4, 0, 3, 4&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (9 samples, 0.02%)</title><rect x="1172.7" y="229" width="0.2" height="15.0" fill="rgb(219,37,6)" rx="2" ry="2" />
<text  x="1175.69" y="239.5" ></text>
</g>
<g >
<title>do_page_fault (6 samples, 0.01%)</title><rect x="1167.2" y="213" width="0.1" height="15.0" fill="rgb(209,197,18)" rx="2" ry="2" />
<text  x="1170.17" y="223.5" ></text>
</g>
<g >
<title>apic_timer_interrupt (70 samples, 0.12%)</title><rect x="1160.6" y="245" width="1.4" height="15.0" fill="rgb(244,202,4)" rx="2" ry="2" />
<text  x="1163.58" y="255.5" ></text>
</g>
<g >
<title>do_IRQ (39 samples, 0.07%)</title><rect x="1162.0" y="229" width="0.8" height="15.0" fill="rgb(205,87,31)" rx="2" ry="2" />
<text  x="1165.00" y="239.5" ></text>
</g>
<g >
<title>blk_done_softirq (19 samples, 0.03%)</title><rect x="1162.3" y="181" width="0.4" height="15.0" fill="rgb(207,190,5)" rx="2" ry="2" />
<text  x="1165.32" y="191.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (12 samples, 0.02%)</title><rect x="1162.0" y="165" width="0.3" height="15.0" fill="rgb(240,224,1)" rx="2" ry="2" />
<text  x="1165.02" y="175.5" ></text>
</g>
<g >
<title>n_tty_read (5 samples, 0.01%)</title><rect x="1189.3" y="165" width="0.1" height="15.0" fill="rgb(245,8,23)" rx="2" ry="2" />
<text  x="1192.34" y="175.5" ></text>
</g>
<g >
<title>irq_exit (19 samples, 0.03%)</title><rect x="1161.6" y="213" width="0.4" height="15.0" fill="rgb(209,127,9)" rx="2" ry="2" />
<text  x="1164.60" y="223.5" ></text>
</g>
<g >
<title>std::ostream::operator&lt;&lt; (5 samples, 0.01%)</title><rect x="1177.5" y="229" width="0.1" height="15.0" fill="rgb(209,177,17)" rx="2" ry="2" />
<text  x="1180.49" y="239.5" ></text>
</g>
<g >
<title>Eigen::DenseBase&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_conj_product_op&lt;double, double&gt;, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; const, Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; const&gt; &gt;::sum (888 samples, 1.51%)</title><rect x="13.0" y="261" width="17.8" height="15.0" fill="rgb(254,93,40)" rx="2" ry="2" />
<text  x="16.02" y="271.5" ></text>
</g>
<g >
<title>lsame_ (10 samples, 0.02%)</title><rect x="1171.5" y="261" width="0.2" height="15.0" fill="rgb(241,11,11)" rx="2" ry="2" />
<text  x="1174.51" y="271.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (9 samples, 0.02%)</title><rect x="1176.6" y="229" width="0.1" height="15.0" fill="rgb(236,171,15)" rx="2" ry="2" />
<text  x="1179.55" y="239.5" ></text>
</g>
<g >
<title>marvel::BaseElas&lt;double, 3ul, 4ul, 1ul, 1ul, marvel::linear_csttt, marvel::basis_func, marvel::quadrature&gt;::~BaseElas (184 samples, 0.31%)</title><rect x="1172.7" y="261" width="3.7" height="15.0" fill="rgb(217,114,52)" rx="2" ry="2" />
<text  x="1175.69" y="271.5" ></text>
</g>
<g >
<title>std::locale::id::_M_id (7 samples, 0.01%)</title><rect x="1166.6" y="245" width="0.2" height="15.0" fill="rgb(234,148,46)" rx="2" ry="2" />
<text  x="1169.63" y="255.5" ></text>
</g>
<g >
<title>ahci_handle_port_interrupt (6 samples, 0.01%)</title><rect x="1162.1" y="101" width="0.1" height="15.0" fill="rgb(218,137,28)" rx="2" ry="2" />
<text  x="1165.10" y="111.5" ></text>
</g>
<g >
<title>pci_conf1_read (7 samples, 0.01%)</title><rect x="1161.8" y="37" width="0.2" height="15.0" fill="rgb(228,106,32)" rx="2" ry="2" />
<text  x="1164.84" y="47.5" ></text>
</g>
<g >
<title>Eigen::internal::conjugate_gradient&lt;Eigen::Transpose&lt;Eigen::Ref&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Block&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; const, -1, 1, true&gt;, Eigen::Block&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, -1, 1, true&gt;, Eigen::DiagonalPreconditioner&lt;double&gt; &gt; (25 samples, 0.04%)</title><rect x="10.2" y="277" width="0.5" height="15.0" fill="rgb(229,49,35)" rx="2" ry="2" />
<text  x="13.18" y="287.5" ></text>
</g>
<g >
<title>ext4_finish_bio (7 samples, 0.01%)</title><rect x="1162.4" y="53" width="0.1" height="15.0" fill="rgb(212,82,29)" rx="2" ry="2" />
<text  x="1165.36" y="63.5" ></text>
</g>
<g >
<title>Eigen::internal::copy_using_evaluator_innervec_CompleteUnrolling&lt;Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 12, 1, 0, 12, 1&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 12, 1, 0, 12, 1&gt; &gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;, 2, 12&gt;::run (10 samples, 0.02%)</title><rect x="1164.7" y="229" width="0.2" height="15.0" fill="rgb(242,2,26)" rx="2" ry="2" />
<text  x="1167.68" y="239.5" ></text>
</g>
<g >
<title>exit_to_usermode_loop (8 samples, 0.01%)</title><rect x="1162.8" y="213" width="0.2" height="15.0" fill="rgb(219,145,43)" rx="2" ry="2" />
<text  x="1165.80" y="223.5" ></text>
</g>
<g >
<title>ext4_da_write_end (5 samples, 0.01%)</title><rect x="1181.4" y="101" width="0.1" height="15.0" fill="rgb(237,123,39)" rx="2" ry="2" />
<text  x="1184.39" y="111.5" ></text>
</g>
<g >
<title>marvel::BaseElas&lt;double, 3ul, 4ul, 1ul, 1ul, marvel::linear_csttt, marvel::basis_func, marvel::quadrature&gt;::Gra (44 samples, 0.07%)</title><rect x="1171.8" y="261" width="0.8" height="15.0" fill="rgb(245,205,2)" rx="2" ry="2" />
<text  x="1174.77" y="271.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (35 samples, 0.06%)</title><rect x="1187.4" y="277" width="0.7" height="15.0" fill="rgb(210,8,11)" rx="2" ry="2" />
<text  x="1190.42" y="287.5" ></text>
</g>
<g >
<title>[unknown] (199 samples, 0.34%)</title><rect x="1163.4" y="261" width="3.9" height="15.0" fill="rgb(220,75,50)" rx="2" ry="2" />
<text  x="1166.36" y="271.5" ></text>
</g>
<g >
<title>__perf_event_task_sched_in (8 samples, 0.01%)</title><rect x="1162.8" y="149" width="0.2" height="15.0" fill="rgb(211,62,22)" rx="2" ry="2" />
<text  x="1165.80" y="159.5" ></text>
</g>
<g >
<title>account_process_tick (5 samples, 0.01%)</title><rect x="1161.0" y="133" width="0.1" height="15.0" fill="rgb(251,140,52)" rx="2" ry="2" />
<text  x="1163.98" y="143.5" ></text>
</g>
<g >
<title>ahci_handle_port_intr (6 samples, 0.01%)</title><rect x="1162.1" y="117" width="0.1" height="15.0" fill="rgb(215,154,41)" rx="2" ry="2" />
<text  x="1165.10" y="127.5" ></text>
</g>
<g >
<title>do_writev (17 samples, 0.03%)</title><rect x="1181.2" y="213" width="0.4" height="15.0" fill="rgb(227,5,50)" rx="2" ry="2" />
<text  x="1184.21" y="223.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (18 samples, 0.03%)</title><rect x="1181.2" y="261" width="0.4" height="15.0" fill="rgb(254,146,36)" rx="2" ry="2" />
<text  x="1184.19" y="271.5" ></text>
</g>
<g >
<title>blk_run_queue (7 samples, 0.01%)</title><rect x="1162.6" y="69" width="0.1" height="15.0" fill="rgb(224,140,30)" rx="2" ry="2" />
<text  x="1165.56" y="79.5" ></text>
</g>
<g >
<title>virtual thunk to std::basic_ofstream&lt;char, std::char_traits&lt;char&gt; &gt;::~basic_ofstream (167 samples, 0.28%)</title><rect x="1177.8" y="261" width="3.4" height="15.0" fill="rgb(206,142,8)" rx="2" ry="2" />
<text  x="1180.81" y="271.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn@plt (5 samples, 0.01%)</title><rect x="1178.2" y="229" width="0.1" height="15.0" fill="rgb(253,148,34)" rx="2" ry="2" />
<text  x="1181.19" y="239.5" ></text>
</g>
<g >
<title>task_tick_fair (8 samples, 0.01%)</title><rect x="1161.3" y="117" width="0.2" height="15.0" fill="rgb(249,24,49)" rx="2" ry="2" />
<text  x="1164.30" y="127.5" ></text>
</g>
<g >
<title>marvel::basis_func&lt;double, 3ul, 1ul, 4ul&gt;::get_def_gra (27 samples, 0.05%)</title><rect x="1166.0" y="229" width="0.5" height="15.0" fill="rgb(231,52,20)" rx="2" ry="2" />
<text  x="1168.99" y="239.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (12 samples, 0.02%)</title><rect x="1162.0" y="149" width="0.3" height="15.0" fill="rgb(247,29,15)" rx="2" ry="2" />
<text  x="1165.02" y="159.5" ></text>
</g>
<g >
<title>timekeeping_update (6 samples, 0.01%)</title><rect x="1160.9" y="117" width="0.1" height="15.0" fill="rgb(237,217,44)" rx="2" ry="2" />
<text  x="1163.86" y="127.5" ></text>
</g>
<g >
<title>std::ostream::sentry::~sentry (15 samples, 0.03%)</title><rect x="1180.7" y="229" width="0.3" height="15.0" fill="rgb(245,138,6)" rx="2" ry="2" />
<text  x="1183.67" y="239.5" ></text>
</g>
<g >
<title>dgemm_ (45 samples, 0.08%)</title><rect x="1188.2" y="277" width="0.9" height="15.0" fill="rgb(236,22,25)" rx="2" ry="2" />
<text  x="1191.16" y="287.5" ></text>
</g>
<g >
<title>Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 4, 0, 3, 4&gt;, Eigen::CwiseNullaryOp&lt;marvel::indexing_functor&lt;Eigen::Matrix&lt;double, 3, -1, 0, 3, -1&gt;, Eigen::Matrix&lt;int, 3, 1, 0, 3, 1&gt;, Eigen::Block&lt;Eigen::Matrix&lt;int, 4, -1, 0, 4, -1&gt; const, 4, 1, true&gt; &gt;, Eigen::Matrix&lt;double, 3, 4, 0, 3, 4&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (8 samples, 0.01%)</title><rect x="1172.9" y="229" width="0.1" height="15.0" fill="rgb(212,43,52)" rx="2" ry="2" />
<text  x="1175.87" y="239.5" ></text>
</g>
<g >
<title>finish_task_switch (8 samples, 0.01%)</title><rect x="1162.8" y="165" width="0.2" height="15.0" fill="rgb(206,199,6)" rx="2" ry="2" />
<text  x="1165.80" y="175.5" ></text>
</g>
<g >
<title>all (58,964 samples, 100%)</title><rect x="10.0" y="309" width="1180.0" height="15.0" fill="rgb(252,182,49)" rx="2" ry="2" />
<text  x="13.00" y="319.5" ></text>
</g>
<g >
<title>perf_event_task_tick (6 samples, 0.01%)</title><rect x="1161.2" y="117" width="0.1" height="15.0" fill="rgb(242,79,20)" rx="2" ry="2" />
<text  x="1164.18" y="127.5" ></text>
</g>
<g >
<title>marvel::BaseElas&lt;double, 3ul, 4ul, 1ul, 1ul, marvel::linear_csttt, marvel::basis_func, marvel::quadrature&gt;::Gra (30 samples, 0.05%)</title><rect x="1165.4" y="229" width="0.6" height="15.0" fill="rgb(242,52,16)" rx="2" ry="2" />
<text  x="1168.38" y="239.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (5 samples, 0.01%)</title><rect x="1189.3" y="261" width="0.1" height="15.0" fill="rgb(233,117,0)" rx="2" ry="2" />
<text  x="1192.34" y="271.5" ></text>
</g>
<g >
<title>marvel::BaseElas&lt;double, 3ul, 4ul, 1ul, 1ul, marvel::linear_csttt, marvel::basis_func, marvel::quadrature&gt;::Gra (5 samples, 0.01%)</title><rect x="1166.5" y="245" width="0.1" height="15.0" fill="rgb(222,186,47)" rx="2" ry="2" />
<text  x="1169.53" y="255.5" ></text>
</g>
<g >
<title>rebalance_domains (6 samples, 0.01%)</title><rect x="1161.7" y="165" width="0.1" height="15.0" fill="rgb(236,89,49)" rx="2" ry="2" />
<text  x="1164.68" y="175.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (7 samples, 0.01%)</title><rect x="1164.0" y="245" width="0.1" height="15.0" fill="rgb(225,49,52)" rx="2" ry="2" />
<text  x="1166.98" y="255.5" ></text>
</g>
<g >
<title>std::basic_filebuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (22 samples, 0.04%)</title><rect x="1189.5" y="277" width="0.4" height="15.0" fill="rgb(241,142,14)" rx="2" ry="2" />
<text  x="1192.46" y="287.5" ></text>
</g>
<g >
<title>[unknown] (39 samples, 0.07%)</title><rect x="1177.0" y="245" width="0.8" height="15.0" fill="rgb(246,182,7)" rx="2" ry="2" />
<text  x="1179.99" y="255.5" ></text>
</g>
<g >
<title>sys_writev (18 samples, 0.03%)</title><rect x="1181.2" y="229" width="0.4" height="15.0" fill="rgb(219,45,11)" rx="2" ry="2" />
<text  x="1184.19" y="239.5" ></text>
</g>
<g >
<title>scsi_run_queue (10 samples, 0.02%)</title><rect x="1162.5" y="101" width="0.2" height="15.0" fill="rgb(251,177,27)" rx="2" ry="2" />
<text  x="1165.50" y="111.5" ></text>
</g>
<g >
<title>scsi_request_fn (7 samples, 0.01%)</title><rect x="1162.6" y="37" width="0.1" height="15.0" fill="rgb(249,223,25)" rx="2" ry="2" />
<text  x="1165.56" y="47.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (288 samples, 0.49%)</title><rect x="1181.7" y="277" width="5.7" height="15.0" fill="rgb(250,203,35)" rx="2" ry="2" />
<text  x="1184.65" y="287.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;double&gt; (24 samples, 0.04%)</title><rect x="1178.4" y="229" width="0.5" height="15.0" fill="rgb(207,31,18)" rx="2" ry="2" />
<text  x="1181.39" y="239.5" ></text>
</g>
<g >
<title>generic_perform_write (15 samples, 0.03%)</title><rect x="1181.2" y="117" width="0.3" height="15.0" fill="rgb(214,62,1)" rx="2" ry="2" />
<text  x="1184.23" y="127.5" ></text>
</g>
<g >
<title>Eigen::internal::conjugate_gradient&lt;Eigen::Transpose&lt;Eigen::Ref&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Block&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt; const, -1, 1, true&gt;, Eigen::Block&lt;Eigen::Matrix&lt;double, -1, 1, 0, -1, 1&gt;, -1, 1, true&gt;, Eigen::DiagonalPreconditioner&lt;double&gt; &gt; (56,570 samples, 95.94%)</title><rect x="30.9" y="261" width="1132.1" height="15.0" fill="rgb(221,203,44)" rx="2" ry="2" />
<text  x="33.89" y="271.5" >Eigen::internal::conjugate_gradient&lt;Eigen::Transpose&lt;Eigen::Ref&lt;Eigen::SparseMatrix&lt;double, 0, int&gt; const, 0, Eigen::OuterStride&lt;-1&gt; &gt; const&gt;, Eigen::Block&lt;E..</text>
</g>
<g >
<title>blk_update_request (7 samples, 0.01%)</title><rect x="1162.4" y="101" width="0.1" height="15.0" fill="rgb(249,52,21)" rx="2" ry="2" />
<text  x="1165.36" y="111.5" ></text>
</g>
<g >
<title>marvel::BaseElas&lt;double, 3ul, 4ul, 1ul, 1ul, marvel::linear_csttt, marvel::basis_func, marvel::quadrature&gt;::Val (56 samples, 0.09%)</title><rect x="1174.5" y="229" width="1.2" height="15.0" fill="rgb(211,227,3)" rx="2" ry="2" />
<text  x="1177.53" y="239.5" ></text>
</g>
<g >
<title>raw_pci_read (7 samples, 0.01%)</title><rect x="1161.8" y="53" width="0.2" height="15.0" fill="rgb(245,149,3)" rx="2" ry="2" />
<text  x="1164.84" y="63.5" ></text>
</g>
<g >
<title>ext4_end_bio (7 samples, 0.01%)</title><rect x="1162.4" y="69" width="0.1" height="15.0" fill="rgb(240,88,29)" rx="2" ry="2" />
<text  x="1165.36" y="79.5" ></text>
</g>
<g >
<title>std::ostream::_M_insert&lt;long&gt; (90 samples, 0.15%)</title><rect x="1178.9" y="229" width="1.8" height="15.0" fill="rgb(222,197,51)" rx="2" ry="2" />
<text  x="1181.87" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (117 samples, 0.20%)</title><rect x="10.7" y="277" width="2.3" height="15.0" fill="rgb(235,210,12)" rx="2" ry="2" />
<text  x="13.68" y="287.5" ></text>
</g>
<g >
<title>ret_from_intr (39 samples, 0.07%)</title><rect x="1162.0" y="245" width="0.8" height="15.0" fill="rgb(232,139,37)" rx="2" ry="2" />
<text  x="1165.00" y="255.5" ></text>
</g>
<g >
<title>handle_edge_irq (14 samples, 0.02%)</title><rect x="1162.0" y="197" width="0.3" height="15.0" fill="rgb(236,99,0)" rx="2" ry="2" />
<text  x="1165.00" y="207.5" ></text>
</g>
<g >
<title>_IO_vsnprintf (114 samples, 0.19%)</title><rect x="10.7" y="261" width="2.3" height="15.0" fill="rgb(214,134,33)" rx="2" ry="2" />
<text  x="13.74" y="271.5" ></text>
</g>
<g >
<title>pci_read_config_word (7 samples, 0.01%)</title><rect x="1161.8" y="101" width="0.2" height="15.0" fill="rgb(241,180,52)" rx="2" ry="2" />
<text  x="1164.84" y="111.5" ></text>
</g>
<g >
<title>__do_page_fault (6 samples, 0.01%)</title><rect x="1167.2" y="197" width="0.1" height="15.0" fill="rgb(241,204,32)" rx="2" ry="2" />
<text  x="1170.17" y="207.5" ></text>
</g>
<g >
<title>__vfs_read (5 samples, 0.01%)</title><rect x="1189.3" y="197" width="0.1" height="15.0" fill="rgb(234,142,49)" rx="2" ry="2" />
<text  x="1192.34" y="207.5" ></text>
</g>
<g >
<title>[unknown] (58,371 samples, 98.99%)</title><rect x="13.0" y="277" width="1168.2" height="15.0" fill="rgb(215,33,7)" rx="2" ry="2" />
<text  x="16.02" y="287.5" >[unknown]</text>
</g>
<g >
<title>[unknown] (120 samples, 0.20%)</title><rect x="1164.1" y="245" width="2.4" height="15.0" fill="rgb(238,186,29)" rx="2" ry="2" />
<text  x="1167.12" y="255.5" ></text>
</g>
<g >
<title>ext4_file_write_iter (15 samples, 0.03%)</title><rect x="1181.2" y="149" width="0.3" height="15.0" fill="rgb(207,171,18)" rx="2" ry="2" />
<text  x="1184.23" y="159.5" ></text>
</g>
<g >
<title>__intel_pmu_enable_all.constprop.23 (8 samples, 0.01%)</title><rect x="1162.8" y="101" width="0.2" height="15.0" fill="rgb(232,124,17)" rx="2" ry="2" />
<text  x="1165.80" y="111.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (23 samples, 0.04%)</title><rect x="1162.3" y="197" width="0.5" height="15.0" fill="rgb(244,137,26)" rx="2" ry="2" />
<text  x="1165.32" y="207.5" ></text>
</g>
<g >
<title>scsi_end_request (19 samples, 0.03%)</title><rect x="1162.3" y="117" width="0.4" height="15.0" fill="rgb(211,201,54)" rx="2" ry="2" />
<text  x="1165.32" y="127.5" ></text>
</g>
<g >
<title>std::ostream::sentry::sentry (14 samples, 0.02%)</title><rect x="1166.8" y="245" width="0.3" height="15.0" fill="rgb(236,78,44)" rx="2" ry="2" />
<text  x="1169.81" y="255.5" ></text>
</g>
<g >
<title>__libc_start_main (5 samples, 0.01%)</title><rect x="1167.7" y="261" width="0.1" height="15.0" fill="rgb(227,201,48)" rx="2" ry="2" />
<text  x="1170.69" y="271.5" ></text>
</g>
<g >
<title>Eigen::internal::generic_dense_assignment_kernel&lt;Eigen::internal::evaluator&lt;Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; &gt;, Eigen::internal::evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const, Eigen::Transpose&lt;Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const&gt; const&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt;, 0&gt;::assignCoeff (24 samples, 0.04%)</title><rect x="1164.9" y="229" width="0.5" height="15.0" fill="rgb(220,50,24)" rx="2" ry="2" />
<text  x="1167.88" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;Eigen::Triplet&lt;double, int&gt;, std::allocator&lt;Eigen::Triplet&lt;double, int&gt; &gt; &gt;::emplace_back&lt;Eigen::Triplet&lt;double, int&gt; &gt; (16 samples, 0.03%)</title><rect x="1176.1" y="229" width="0.3" height="15.0" fill="rgb(235,225,6)" rx="2" ry="2" />
<text  x="1179.05" y="239.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.25] (5 samples, 0.01%)</title><rect x="1178.4" y="213" width="0.1" height="15.0" fill="rgb(230,37,38)" rx="2" ry="2" />
<text  x="1181.43" y="223.5" ></text>
</g>
<g >
<title>__generic_file_write_iter (15 samples, 0.03%)</title><rect x="1181.2" y="133" width="0.3" height="15.0" fill="rgb(247,61,18)" rx="2" ry="2" />
<text  x="1184.23" y="143.5" ></text>
</g>
<g >
<title>vfs_read (5 samples, 0.01%)</title><rect x="1189.3" y="213" width="0.1" height="15.0" fill="rgb(246,183,28)" rx="2" ry="2" />
<text  x="1192.34" y="223.5" ></text>
</g>
<g >
<title>scheduler_tick (17 samples, 0.03%)</title><rect x="1161.1" y="133" width="0.4" height="15.0" fill="rgb(251,6,4)" rx="2" ry="2" />
<text  x="1164.14" y="143.5" ></text>
</g>
<g >
<title>pci_read (7 samples, 0.01%)</title><rect x="1161.8" y="69" width="0.2" height="15.0" fill="rgb(249,227,47)" rx="2" ry="2" />
<text  x="1164.84" y="79.5" ></text>
</g>
<g >
<title>scsi_softirq_done (19 samples, 0.03%)</title><rect x="1162.3" y="165" width="0.4" height="15.0" fill="rgb(205,58,29)" rx="2" ry="2" />
<text  x="1165.32" y="175.5" ></text>
</g>
<g >
<title>do_iter_readv_writev (15 samples, 0.03%)</title><rect x="1181.2" y="165" width="0.3" height="15.0" fill="rgb(217,181,23)" rx="2" ry="2" />
<text  x="1184.23" y="175.5" ></text>
</g>
<g >
<title>Eigen::internal::call_dense_assignment_loop&lt;Eigen::Matrix&lt;double, 3, 4, 0, 3, 4&gt;, Eigen::CwiseNullaryOp&lt;marvel::indexing_functor&lt;Eigen::Map&lt;Eigen::Matrix&lt;double, -1, -1, 0, -1, -1&gt; const, 0, Eigen::Stride&lt;0, 0&gt; &gt;, Eigen::Matrix&lt;int, 3, 1, 0, 3, 1&gt;, Eigen::Block&lt;Eigen::Matrix&lt;int, 4, -1, 0, 4, -1&gt; const, 4, 1, true&gt; &gt;, Eigen::Matrix&lt;double, 3, 4, 0, 3, 4&gt; &gt;, Eigen::internal::assign_op&lt;double, double&gt; &gt; (23 samples, 0.04%)</title><rect x="1163.4" y="245" width="0.4" height="15.0" fill="rgb(251,96,20)" rx="2" ry="2" />
<text  x="1166.36" y="255.5" ></text>
</g>
<g >
<title>std::basic_streambuf&lt;char, std::char_traits&lt;char&gt; &gt;::xsputn (10 samples, 0.02%)</title><rect x="1176.8" y="229" width="0.2" height="15.0" fill="rgb(226,207,42)" rx="2" ry="2" />
<text  x="1179.79" y="239.5" ></text>
</g>
<g >
<title>tick_sched_handle (25 samples, 0.04%)</title><rect x="1161.0" y="165" width="0.5" height="15.0" fill="rgb(254,97,17)" rx="2" ry="2" />
<text  x="1163.98" y="175.5" ></text>
</g>
<g >
<title>bio_endio (7 samples, 0.01%)</title><rect x="1162.4" y="85" width="0.1" height="15.0" fill="rgb(217,68,36)" rx="2" ry="2" />
<text  x="1165.36" y="95.5" ></text>
</g>
<g >
<title>[unknown] (167 samples, 0.28%)</title><rect x="1177.8" y="245" width="3.4" height="15.0" fill="rgb(223,10,2)" rx="2" ry="2" />
<text  x="1180.81" y="255.5" ></text>
</g>
<g >
<title>test_elas (58,964 samples, 100.00%)</title><rect x="10.0" y="293" width="1180.0" height="15.0" fill="rgb(249,199,2)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >test_elas</text>
</g>
<g >
<title>__blk_run_queue (7 samples, 0.01%)</title><rect x="1162.6" y="53" width="0.1" height="15.0" fill="rgb(244,117,11)" rx="2" ry="2" />
<text  x="1165.56" y="63.5" ></text>
</g>
<g >
<title>irq_exit (23 samples, 0.04%)</title><rect x="1162.3" y="213" width="0.5" height="15.0" fill="rgb(240,17,44)" rx="2" ry="2" />
<text  x="1165.32" y="223.5" ></text>
</g>
<g >
<title>[unknown] (22 samples, 0.04%)</title><rect x="1176.6" y="245" width="0.4" height="15.0" fill="rgb(245,157,46)" rx="2" ry="2" />
<text  x="1179.55" y="255.5" ></text>
</g>
<g >
<title>call_timer_fn (7 samples, 0.01%)</title><rect x="1161.8" y="165" width="0.2" height="15.0" fill="rgb(224,121,27)" rx="2" ry="2" />
<text  x="1164.84" y="175.5" ></text>
</g>
<g >
<title>page_fault (6 samples, 0.01%)</title><rect x="1167.2" y="229" width="0.1" height="15.0" fill="rgb(248,194,35)" rx="2" ry="2" />
<text  x="1170.17" y="239.5" ></text>
</g>
<g >
<title>end_page_writeback (6 samples, 0.01%)</title><rect x="1162.4" y="37" width="0.1" height="15.0" fill="rgb(220,5,5)" rx="2" ry="2" />
<text  x="1165.38" y="47.5" ></text>
</g>
<g >
<title>swapgs_restore_regs_and_return_to_usermode (9 samples, 0.02%)</title><rect x="1162.8" y="245" width="0.2" height="15.0" fill="rgb(243,192,15)" rx="2" ry="2" />
<text  x="1165.78" y="255.5" ></text>
</g>
<g >
<title>update_blocked_averages (6 samples, 0.01%)</title><rect x="1161.7" y="149" width="0.1" height="15.0" fill="rgb(242,90,38)" rx="2" ry="2" />
<text  x="1164.68" y="159.5" ></text>
</g>
<g >
<title>account_user_time (5 samples, 0.01%)</title><rect x="1161.0" y="117" width="0.1" height="15.0" fill="rgb(224,176,2)" rx="2" ry="2" />
<text  x="1163.98" y="127.5" ></text>
</g>
<g >
<title>marvel::BaseElas&lt;double, 3ul, 4ul, 1ul, 1ul, marvel::linear_csttt, marvel::basis_func, marvel::quadrature&gt;::Hes (74 samples, 0.13%)</title><rect x="1173.0" y="229" width="1.5" height="15.0" fill="rgb(224,76,13)" rx="2" ry="2" />
<text  x="1176.05" y="239.5" ></text>
</g>
<g >
<title>smp_apic_timer_interrupt (69 samples, 0.12%)</title><rect x="1160.6" y="229" width="1.4" height="15.0" fill="rgb(224,153,48)" rx="2" ry="2" />
<text  x="1163.60" y="239.5" ></text>
</g>
<g >
<title>pci_read_config_word.part.10 (7 samples, 0.01%)</title><rect x="1161.8" y="85" width="0.2" height="15.0" fill="rgb(211,221,14)" rx="2" ry="2" />
<text  x="1164.84" y="95.5" ></text>
</g>
<g >
<title>Eigen::internal::binary_evaluator&lt;Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_difference_op&lt;double, double&gt;, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_sum_op&lt;double, double&gt;, Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const, Eigen::Transpose&lt;Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const&gt; const&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const&gt; const&gt; const&gt; const, Eigen::CwiseBinaryOp&lt;Eigen::internal::scalar_product_op&lt;double, double&gt;, Eigen::CwiseNullaryOp&lt;Eigen::internal::scalar_constant_op&lt;double&gt;, Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const&gt; const, Eigen::Matrix&lt;double, 3, 3, 0, 3, 3&gt; const&gt; const&gt;, Eigen::internal::IndexBased, Eigen::internal::IndexBased, double, double&gt;::coeff (28 samples, 0.05%)</title><rect x="1164.1" y="229" width="0.6" height="15.0" fill="rgb(247,152,46)" rx="2" ry="2" />
<text  x="1167.12" y="239.5" ></text>
</g>
<g >
<title>nv_timer_callback_typed_data (7 samples, 0.01%)</title><rect x="1161.8" y="149" width="0.2" height="15.0" fill="rgb(232,157,14)" rx="2" ry="2" />
<text  x="1164.84" y="159.5" ></text>
</g>
<g >
<title>__GI___writev (20 samples, 0.03%)</title><rect x="1181.2" y="277" width="0.4" height="15.0" fill="rgb(222,169,10)" rx="2" ry="2" />
<text  x="1184.17" y="287.5" ></text>
</g>
<g >
<title>std::vector&lt;Eigen::Triplet&lt;double, int&gt;, std::allocator&lt;Eigen::Triplet&lt;double, int&gt; &gt; &gt;::emplace_back&lt;Eigen::Triplet&lt;double, int&gt; &gt; (13 samples, 0.02%)</title><rect x="1167.1" y="245" width="0.2" height="15.0" fill="rgb(249,86,11)" rx="2" ry="2" />
<text  x="1170.09" y="255.5" ></text>
</g>
<g >
<title>update_process_times (25 samples, 0.04%)</title><rect x="1161.0" y="149" width="0.5" height="15.0" fill="rgb(212,139,29)" rx="2" ry="2" />
<text  x="1163.98" y="159.5" ></text>
</g>
<g >
<title>native_write_msr (6 samples, 0.01%)</title><rect x="1162.8" y="85" width="0.1" height="15.0" fill="rgb(211,141,46)" rx="2" ry="2" />
<text  x="1165.82" y="95.5" ></text>
</g>
<g >
<title>tick_sched_timer (36 samples, 0.06%)</title><rect x="1160.8" y="181" width="0.7" height="15.0" fill="rgb(249,127,35)" rx="2" ry="2" />
<text  x="1163.76" y="191.5" ></text>
</g>
<g >
<title>Eigen::internal::set_from_triplets&lt;__gnu_cxx::__normal_iterator&lt;Eigen::Triplet&lt;double, int&gt;*, std::vector&lt;Eigen::Triplet&lt;double, int&gt;, std::allocator&lt;Eigen::Triplet&lt;double, int&gt; &gt; &gt; &gt;, Eigen::SparseMatrix&lt;double, 1, int&gt;, Eigen::internal::scalar_sum_op&lt;double, double&gt; &gt; (13 samples, 0.02%)</title><rect x="1163.1" y="261" width="0.3" height="15.0" fill="rgb(247,192,43)" rx="2" ry="2" />
<text  x="1166.10" y="271.5" ></text>
</g>
<g >
<title>std::ostream::sentry::~sentry@plt (9 samples, 0.02%)</title><rect x="1181.0" y="229" width="0.2" height="15.0" fill="rgb(249,195,26)" rx="2" ry="2" />
<text  x="1183.97" y="239.5" ></text>
</g>
<g >
<title>__schedule (8 samples, 0.01%)</title><rect x="1162.8" y="181" width="0.2" height="15.0" fill="rgb(234,64,19)" rx="2" ry="2" />
<text  x="1165.80" y="191.5" ></text>
</g>
<g >
<title>vfprintf (112 samples, 0.19%)</title><rect x="10.8" y="245" width="2.2" height="15.0" fill="rgb(213,75,21)" rx="2" ry="2" />
<text  x="13.78" y="255.5" ></text>
</g>
<g >
<title>dgemv_ (184 samples, 0.31%)</title><rect x="1167.8" y="261" width="3.7" height="15.0" fill="rgb(218,25,15)" rx="2" ry="2" />
<text  x="1170.83" y="271.5" ></text>
</g>
<g >
<title>__mpn_mul_1 (9 samples, 0.02%)</title><rect x="12.7" y="229" width="0.1" height="15.0" fill="rgb(230,210,13)" rx="2" ry="2" />
<text  x="15.66" y="239.5" ></text>
</g>
<g >
<title>vfs_writev (17 samples, 0.03%)</title><rect x="1181.2" y="197" width="0.4" height="15.0" fill="rgb(245,72,20)" rx="2" ry="2" />
<text  x="1184.21" y="207.5" ></text>
</g>
<g >
<title>marvel::dat_str_core&lt;double, 3ul&gt;::set_zero_after_pre_compute (6 samples, 0.01%)</title><rect x="1189.2" y="277" width="0.1" height="15.0" fill="rgb(229,66,27)" rx="2" ry="2" />
<text  x="1192.16" y="287.5" ></text>
</g>
<g >
<title>tick_do_update_jiffies64.part.11 (10 samples, 0.02%)</title><rect x="1160.8" y="149" width="0.2" height="15.0" fill="rgb(224,135,1)" rx="2" ry="2" />
<text  x="1163.78" y="159.5" ></text>
</g>
</g>
</svg>

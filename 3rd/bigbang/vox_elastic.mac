load(cj_function)$
load(hj_fortran2)$

optimprefix: tt$

f: openw("vox_elastic.f90")$

block(
  [epsilon, X, gw, detDmH, H_invDmH, mu, lam, R],
  epsilon:  genmatrix(epsilon, 3, 1),
  X:        genmatrix(X, 3, 8),
  gw:       genmatrix(gw, 1, 1),      /* gaussian quadrature weights */
  detDmH:   genmatrix(detDmH, 1, 1),
  H_invDmH: genmatrix(H_invDmH, 8, 3),
  mu:       genmatrix(mu, 1, 1),
  lam:      genmatrix(lam, 1, 1),
  R:        genmatrix(R, 3, 3),

  /* N1(epsilon) := (1-epsilon[1,1])*(1-epsilon[2,1])*(1-epsilon[3,1])/8, /\* [-,-,-] *\/ */
  /* N2(epsilon) := (1+epsilon[1,1])*(1-epsilon[2,1])*(1-epsilon[3,1])/8, /\* [+,-,-] *\/ */
  /* N3(epsilon) := (1-epsilon[1,1])*(1+epsilon[2,1])*(1-epsilon[3,1])/8, /\* [-,+,-] *\/ */
  /* N4(epsilon) := (1+epsilon[1,1])*(1+epsilon[2,1])*(1-epsilon[3,1])/8, /\* [+,+,-] *\/ */
  /* N5(epsilon) := (1-epsilon[1,1])*(1-epsilon[2,1])*(1+epsilon[3,1])/8, /\* [-,-,+] *\/ */
  /* N6(epsilon) := (1+epsilon[1,1])*(1-epsilon[2,1])*(1+epsilon[3,1])/8, /\* [+,-,+] *\/ */
  /* N7(epsilon) := (1-epsilon[1,1])*(1+epsilon[2,1])*(1+epsilon[3,1])/8, /\* [-,+,+] *\/ */
  /* N8(epsilon) := (1+epsilon[1,1])*(1+epsilon[2,1])*(1+epsilon[3,1])/8, /\* [+,+,+] *\/ */
  
  /* vox_SF(epsilon) := transpose(matrix([ */
  /*     N1(epsilon), N2(epsilon), N3(epsilon), N4(epsilon), */
  /*     N5(epsilon), N6(epsilon), N7(epsilon), N8(epsilon) */
  /* ])), */
  /* vox_SF_jac(epsilon) := transpose(matrix( FLATTEN(GRAD(vox_SF(epsilon), epsilon)) )), */

  /* with_stdout(f, hj_fortran2(vox_SF, 'val, [epsilon])), */
  /* with_stdout(f, hj_fortran2(vox_SF_jac, 'jac, [epsilon])), */

  /* DmH = dX/deps */
  vox_stvk_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, E],
    F: X.H_invDmH,
    E: (transpose(F).F-ident(3))/2,
    gw*detDmH*(mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(vox_stvk_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  vox_neo_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, I1, J],
    F: X.H_invDmH,
    I1: mat_trace(transpose(F).F),
    J: determinant(F),
    I3: determinant(F)^2,
    gw*detDmH*( mu/2*(I1-log(I3)-3)+lam/8*log(I3)^2 )
  ),
with_stdout(f, val_jac_hes_to_f90(vox_neo_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  vox_sta_neo_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, new_mu, new_lam, alpha, IC, J],
    F: X.H_invDmH,
    new_mu: mu,
    new_lam: lam+mu,
    alpha: 1+new_mu[1,1]/new_lam[1,1]-new_mu[1,1]*new_lam[1,1]/4,
    IC: mat_trace(transpose(F).F),
    J: determinant(F),
    gw*detDmH*( new_mu/2*(IC-3)-new_mu*(J-1)+new_lam/2*(J-1)^2 )
  ),
  with_stdout(f, val_jac_hes_to_f90(vox_sta_neo_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  vox_bower_neo_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, Ic, J],
    F: X.H_invDmH,
    Ic: mat_trace(transpose(F).F),
    J: determinant(F),
    gw*detDmH*( mu/2*(J^(-2/3)*Ic-3)+lam/2*(J-1)^2 )
  ),
  with_stdout(f, val_jac_hes_to_f90(vox_bower_neo_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  vox_linear_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, E],
    F: X.H_invDmH,
    E: (transpose(F)+F)/2-ident(3),
    gw*detDmH*(mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(vox_linear_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  vox_corotated_at_quadr(X, H_invDmH, R, detDmH, gw, mu, lam) := block(
    [F, E],
    F: X.H_invDmH,
    E: (transpose(F).R+transpose(R).F)/2-ident(3),
    gw*detDmH*(mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(vox_corotated_at_quadr, [X, H_invDmH, R, detDmH, gw, mu, lam])),

  return()
)$

block(
  [epsilon, X, gw, detDmH, H_invDmH, mu, lam, R],
  epsilon:  genmatrix(epsilon, 2, 1),
  X:        genmatrix(X, 2, 4),
  gw:       genmatrix(gw, 1, 1),      /* gaussian quadrature weights */
  detDmH:   genmatrix(detDmH, 1, 1),
  H_invDmH: genmatrix(H_invDmH, 4, 2),
  mu:       genmatrix(mu, 1, 1),
  lam:      genmatrix(lam, 1, 1),
  R:        genmatrix(R, 2, 2),

  /* DmH = dX/deps */
  quad_stvk_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, E],
    F: X.H_invDmH,
    E: (transpose(F).F-ident(2))/2,
    gw*detDmH*(mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(quad_stvk_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  quad_neo_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, I1, J],
    F: X.H_invDmH,
    I1: mat_trace(transpose(F).F),
    J: determinant(F),
    I1bar: I1/J,
    0.5*gw*detDmH*( mu*(I1bar-2)+lam*(J-1)^2 )
  ),
  with_stdout(f, val_jac_hes_to_f90(quad_neo_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  quad_linear_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, E],
    F: X.H_invDmH,
    E: (transpose(F)+F)/2-ident(2),
    gw*detDmH*(mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(quad_linear_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  quad_coro_at_quadr(X, H_invDmH, R, detDmH, gw, mu, lam) := block(
    [F, E],
    F: X.H_invDmH,
    E: (transpose(F).R+transpose(R).F)/2-ident(2),
    gw*detDmH*(mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(quad_coro_at_quadr, [X, H_invDmH, R, detDmH, gw, mu, lam])),

  return()
)$

block(
  [epsilon, F, mu, lam, R],
  epsilon:  genmatrix(epsilon, 2, 1),
  F:        genmatrix(F, 2, 2),
  mu:       genmatrix(mu, 1, 1),
  lam:      genmatrix(lam, 1, 1),
  R:        genmatrix(R, 2, 2),

  quad_stvk_psi_qr(F, mu, lam) := block(
    [E],
    E: (transpose(F).F-ident(2))/2,
    mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2
  ),
  with_stdout(f, val_jac_hes_to_f90(quad_stvk_psi_qr, [F, mu, lam])),

  quad_neo_psi_qr(F, mu, lam) := block(
    [I1, J],
    I1: mat_trace(transpose(F).F),
    J: determinant(F),
    I1bar: I1/J,
    0.5*( mu*(I1bar-2)+lam*(J-1)^2 )
  ),
  with_stdout(f, val_jac_hes_to_f90(quad_neo_psi_qr, [F, mu, lam])),

  /* quad_lin_psi_qr(F, mu, lam) := block( */
  /*   [E], */
  /*   E: (transpose(F)+F)/2-ident(2), */
  /*   mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2 */
  /* ), */
  /* quad_lin_psi_qr_jac(F, mu, lam) := matrix(FLATTEN( GRAD(quad_lin_psi_qr(F, mu, lam), F) )), */
  /* with_stdout(f, hj_fortran2(quad_lin_psi_qr, 'val, [F, mu, lam])), */
  /* with_stdout(f, hj_fortran2(quad_lin_psi_qr_jac, 'jac, [F, mu, lam])), */
  /* with_stdout(f, val_jac_hes_to_f90(quad_lin_psi_qr, [F, mu, lam])), */


  /* quad_coro_psi_qr(F, R, mu, lam) := block( */
  /*   mu*mat_norm(F-R, frobenius)^2+lam/2*mat_trace(transpose(R).F-ident(2))^2 */
  /* ), */
  /* quad_coro_psi_qr_jac(F, R, mu, lam) := matrix(FLATTEN( GRAD(quad_coro_psi_qr(F, R, mu, lam), F) )), */
  /* with_stdout(f, hj_fortran2(quad_coro_psi_qr, 'val, [F, R, mu, lam])), */
  /* with_stdout(f, hj_fortran2(quad_coro_psi_qr_jac, 'jac, [F, R, mu, lam])), */
  /* with_stdout(f, val_jac_hes_to_f90(quad_coro_psi_qr, [F, R, mu, lam])), */

  return()
)$

block(
  [epsilon, X, gw, detDmH, H_invDmH, mu, lam, R],
  epsilon:  genmatrix(epsilon, 2, 1),
  X:        genmatrix(X, 2, 9),
  gw:       genmatrix(gw, 1, 1),      /* gaussian quadrature weights */
  detDmH:   genmatrix(detDmH, 1, 1),
  H_invDmH: genmatrix(H_invDmH, 9, 2),
  mu:       genmatrix(mu, 1, 1),
  lam:      genmatrix(lam, 1, 1),
  R:        genmatrix(R, 2, 2),

  /* DmH = dX/deps */
  quad9_stvk_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, E],
    F: X.H_invDmH,
    E: (transpose(F).F-ident(2))/2,
    gw*detDmH*(mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(quad9_stvk_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  quad9_neo_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, I1, J],
    F: X.H_invDmH,
    I1: mat_trace(transpose(F).F),
    J: determinant(F),
    I1bar: I1/J,
    0.5*gw*detDmH*( mu*(I1bar-2)+lam*(J-1)^2 )
  ),
  with_stdout(f, val_jac_hes_to_f90(quad9_neo_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  quad9_linear_at_quadr(X, H_invDmH, detDmH, gw, mu, lam) := block(
    [F, E],
    F: X.H_invDmH,
    E: (transpose(F)+F)/2-ident(2),
    gw*detDmH*(mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(quad9_linear_at_quadr, [X, H_invDmH, detDmH, gw, mu, lam])),

  quad9_coro_at_quadr(X, H_invDmH, R, detDmH, gw, mu, lam) := block(
    [F],
    F: X.H_invDmH,
    E: (transpose(F).R+transpose(R).F)/2-ident(2),
    gw*detDmH*(mu*mat_norm(E, frobenius)^2+lam/2*mat_trace(E)^2)
  ),
  with_stdout(f, val_jac_hes_to_f90(quad9_coro_at_quadr, [X, H_invDmH, R, detDmH, gw, mu, lam])),

  return()
)$

close(f)$
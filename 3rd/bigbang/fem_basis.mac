load("./cj_function.mac")$
load("./hj_fortran2.mac")$
load(interpol)$

optimprefix: tt$

f: openw("fem_basis.f90")$

n_point_lagrange(x, N) := block(
  [lx, lv, rtn],
  lx: makelist(-1+i*2/(N-1), i, 0, N-1, 1),
  
  rtn: [],

  for i:1 thru N do block(
      lv: makelist(0, N),    
      lv[i]: 1,

      tmp: transpose(matrix(lx, lv)),
      rtn: append(rtn, [lagrange(tmp)])
  ),
  rtn
)$

nu_n_point_lagrange(x, lx) := block(
  [rtn],
  rtn: [],

  N: length(lx),
  for i:1 thru N do block(
      lv: makelist(0, N),
      lv[i]: 1,

      tmp: transpose(matrix(lx, lv)),
      rtn: append(rtn, [lagrange(tmp)])
  ),
  rtn
)$

/* mid is [1x2] matrix */
two_point_interp(x, mid) := block(
  [rtn],
  rtn: [],

  for i:1 thru 2 do block(
      lv: makelist(0, 2),
      lv[i]: 1,

      tmp: transpose(matrix([-1, 1], lv)),
      tmp: addrow(tmp, mid),
      rtn: append(rtn, [ratinterpol(tmp, 1)])
   ),
   rtn
)$

quad4_shift_shape_func(eps, midx, midy) := block(
  [rtn],
  rtn: [],

  fx: two_point_interp(x, midx),
  fy: two_point_interp(x, midy),

  for i:1 thru 2 do
    for j:1 thru 2 do
      rtn: append(rtn, [subst([x=eps[1,1]], fx[i])*subst([x=eps[2,1]], fy[j])]),

  transpose(matrix(rtn))
)$

block(
  [eps, midx, midy],
  eps:  genmatrix(eps,  2, 1),
  midx: genmatrix(midx, 1, 2),
  midy: genmatrix(midy, 1, 2),

  with_stdout(f, val_jac_to_f90(quad4_shift_shape_func, [eps, midx, midy])),

  return()
)$

/* eps is a matrix here */
quad_fem_basis_func(eps, N) := block(
  [rtn],
  rtn: [],
  
  fx: n_point_lagrange(x, N),

  /* first coord has higher priority */
  for i:1 thru length(fx) do
    for j:1 thru length(fx) do
      rtn: append(rtn, [subst([x=eps[1,1]], fx[i])*subst([x=eps[2,1]], fx[j])]),

  transpose(matrix(rtn))
)$

hex_fem_basis_func(eps, N) := block(
  [rtn],
  rtn: [],

  fx: n_point_lagrange(x, N),

  for i:1 thru length(fx) do
    for j:1 thru length(fx) do
      for k:1 thru length(fx) do
        rtn: append(rtn, [
           subst([x=eps[1,1]], fx[i])
          *subst([x=eps[2,1]], fx[j])
          *subst([x=eps[3,1]], fx[k])
        ]),

  transpose(matrix(rtn))
)$

/* block( */
/*   [eps], */
/*   eps: genmatrix(eps, 3, 1), */
  
/*   fake_hex27_basis_func(eps) := block( */
/*     [rtn], */
/*     rtn: [], */

/*     fx: [(1-x)*(1+x)/2, ], */

/*     for i:1 thru length(fx) do */
/*       for j:1 thru length(fx) do */
/*         for k:1 thru length(fx) do */
/*           rtn: append(rtn, [ */
/*              subst([x=eps[1,1]], fx[i]) */
/*             *subst([x=eps[2,1]], fx[j]) */
/*             *subst([x=eps[3,1]], fx[k]) */
/*            ]), */

/*    transpose(matrix(rtn)) */
/*   )$ */

/*   with_stdout(f, val_to_f90(fake_hex27_basis_func, [eps])), */
/*   return() */
/* )$ */

/* ptx, pty are matrix here */
nu_quad_fem_basis_func(eps, ptx, pty) := block(
  [rtn],
  rtn: [],
  
  fx: nu_n_point_lagrange(x, list_matrix_entries(ptx)),
  fy: nu_n_point_lagrange(x, list_matrix_entries(pty)),

  /* first coord has higher priority */
  for i:1 thru length(fx) do
    for j:1 thru length(fy) do
      rtn: append(rtn, [subst([x=eps[1,1]], fx[i])*subst([x=eps[2,1]], fy[j])]),

  transpose(matrix(rtn))
)$

block(
  [eps, ptx2, pty2, ptx3, pty3, ptx4, pty4],
  eps: genmatrix(eps, 2, 1),

  ptx2: genmatrix(ptx2, 2, 1),
  pty2: genmatrix(pty2, 2, 1),

  ptx3: genmatrix(ptx3, 3, 1),
  pty3: genmatrix(pty3, 3, 1),

  ptx4: genmatrix(ptx4, 4, 1),
  pty4: genmatrix(pty4, 4, 1),

  quad4_shape_function (eps, ptx2, pty2) := nu_quad_fem_basis_func(eps, ptx2, pty2),
  quad9_shape_function (eps, ptx3, pty3) := nu_quad_fem_basis_func(eps, ptx3, pty3),
  quad16_shape_function(eps, ptx4, pty4) := nu_quad_fem_basis_func(eps, ptx4, pty4),

  with_stdout(f, val_jac_hes_to_f90(quad4_shape_function,  [eps, ptx2, pty2])),
  with_stdout(f, val_jac_hes_to_f90(quad9_shape_function,  [eps, ptx3, pty3])),
  with_stdout(f, val_jac_hes_to_f90(quad16_shape_function, [eps, ptx4, pty4])),

  return()
)$

quad_fem_basis_func_jac(eps, N) := matrix(FLATTEN(GRAD(quad_fem_basis_func(eps, N), eps)))$
quad4_shape_func_jac(eps)  := quad_fem_basis_func_jac(eps, 2)$
quad9_shape_func_jac(eps)  := quad_fem_basis_func_jac(eps, 3)$
quad16_shape_func_jac(eps) := quad_fem_basis_func_jac(eps, 4)$

quad4_shape_func_val(eps)  := quad_fem_basis_func(eps, 2)$
quad9_shape_func_val(eps)  := quad_fem_basis_func(eps, 3)$
quad16_shape_func_val(eps) := quad_fem_basis_func(eps, 4)$

block(
  [eps],
  eps: genmatrix(eps, 2, 1),
  
  with_stdout(f, hj_fortran2(quad4_shape_func_jac,  'val, [eps])), 
  with_stdout(f, hj_fortran2(quad9_shape_func_jac,  'val, [eps])),
  with_stdout(f, hj_fortran2(quad16_shape_func_jac, 'val, [eps])),

  with_stdout(f, hj_fortran2(quad4_shape_func_val,  'val, [eps])), 
  with_stdout(f, hj_fortran2(quad9_shape_func_val,  'val, [eps])),
  with_stdout(f, hj_fortran2(quad16_shape_func_val, 'val, [eps])),

  return()
)$

hex8_shape_func(eps)  := hex_fem_basis_func(eps, 2)$
hex27_shape_func(eps) := hex_fem_basis_func(eps, 3)$

block(
  [eps],
  eps: genmatrix(eps, 3, 1),

  with_stdout(f, val_jac_to_f90(hex8_shape_func,  [eps])),
  with_stdout(f, val_jac_to_f90(hex27_shape_func, [eps])),

  return()
)$

/*****************************/
/* radial basis function FEM */
/*****************************/

thin_plate_spline(r) := r^2*log(r)$
gaussian(r) := exp(-r^2)$

quad_rbf_basis_func(eps, N) := block(
  [lx, rtn, func_sum],
  rtn: [],
  
  lx: makelist(-1+i*2/(N-1), i, 0, N-1, 1),

  for i:1 thru length(lx) do
    for j:1 thru length(lx) do
      rtn: append(rtn, [gaussian(NORM(eps-matrix([lx[i]], [lx[j]])))]),

  func_sum: lsum(i, i, rtn),
  transpose(matrix(rtn))/func_sum
)$

quad_rbf_basis_func_jac(eps, N) := matrix(FLATTEN(GRAD(quad_rbf_basis_func(eps, N), eps)))$
quad4_rbf_shape_func_jac(eps)  := quad_rbf_basis_func_jac(eps, 2)$
quad9_rbf_shape_func_jac(eps)  := quad_rbf_basis_func_jac(eps, 3)$
quad16_rbf_shape_func_jac(eps) := quad_rbf_basis_func_jac(eps, 4)$

quad4_rbf_shape_func_val(eps)  := quad_rbf_basis_func(eps, 2)$
quad9_rbf_shape_func_val(eps)  := quad_rbf_basis_func(eps, 3)$
quad16_rbf_shape_func_val(eps) := quad_rbf_basis_func(eps, 4)$

block(
  [eps],
  eps: genmatrix(eps, 2, 1),
  
  with_stdout(f, hj_fortran2(quad4_rbf_shape_func_jac,  'val, [eps])), 
  with_stdout(f, hj_fortran2(quad9_rbf_shape_func_jac,  'val, [eps])),
  with_stdout(f, hj_fortran2(quad16_rbf_shape_func_jac, 'val, [eps])),

  with_stdout(f, hj_fortran2(quad4_rbf_shape_func_val,  'val, [eps])), 
  with_stdout(f, hj_fortran2(quad9_rbf_shape_func_val,  'val, [eps])),
  with_stdout(f, hj_fortran2(quad16_rbf_shape_func_val, 'val, [eps])),

  return()
)$

close(f)$